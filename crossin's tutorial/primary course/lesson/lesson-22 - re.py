import re
text = "Hi, I am Shirley Hilton. I am his wife."
m = re.findall(r"\bhi",text)  # “\b”在正则表达式中表示单词的开头或结尾; r，是raw的意思，它表示对字符串不进行转义
n = re.findall(r"[Hh]i",text)   # []表示满足括号中任一字符
if m:
    print(m)
else:
    print('not match')

a = re.findall(r"i.",text)  # “.”在正则表达式中表示除换行符以外的任意字符
b = re.findall(r"i\S",text)  # “\S”，它表示不是空白符的任意字符。注意是大写字符S

# 在很多搜索中，会用“?”表示任意一个字符，“*”表示任意数量连续字符，这种被称为通配符。
# 但在正则表达式中，任意字符是用“.”表示，而“*”则不是表示字符，而是表示数量:它表示前面的字符可以重复任意多次（包括0次）

# “*”在匹配时，会匹配尽可能长的结果。
# 如果你想让他匹配到最短的就停止，需要用“.*?”。如“I.*?e”


# 查找手机号

nunber = "219874934567823842387"
c = re.findall(r"1[0-9]{10}",nunber)    # 如果要限定长度，就用{}代替+，大括号里写上你想要的长度
print(c)


# 正则表达式

# \w - 匹配字母或数字或下划线或汉字
# \s - 匹配任意的空白符
# ^ - 匹配字符串的开始
# $ - 匹配字符串的结束

# \S 其实就是\s的反义，任意不是空白符的字符。同理，还有：
# \W - 匹配任意不是字母，数字，下划线，汉字的字符
# \D - 匹配任意非数字的字符
# \B - 匹配不是单词开头或结束的位置

# ? - 重复零次或一次
# {n,} - 重复n次或更多次
# {n,m} - 重复n到m次


# e.g.     
# ^\w{4,12}$    表示一段4到12位的字符，包括字母或数字或下划线或汉字，可以用来作为用户注册时检测用户名的规则。
# \d{15,18}     表示15到18位的数字，可以用来检测身份证号码
# ^1\d*x?       以1开头的一串数字，数字结尾有字母x，也可以没有。有的话就带上x
